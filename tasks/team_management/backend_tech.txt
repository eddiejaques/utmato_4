# Backend Technical Needs: Team Management MVP

## Framework & Core Libraries
- **FastAPI**: High-performance, async Python web framework for building APIs.
- **Pydantic v2**: Data validation and serialization using Pydantic models for all input/output.
- **SQLAlchemy 2.0**: ORM for database modeling and async database operations.
- **asyncpg**: Async PostgreSQL driver for efficient DB access.

## Project Structure
- All backend code resides in the `/backend` directory.
- Modular structure: `app/api/` (routes), `app/models/` (ORM models), `app/schemas/` (Pydantic schemas), `app/services/` (business logic), `app/db/` (database setup), `app/middleware/` (custom middleware), `app/dependencies/` (dependency injection).

## API Design
- RESTful endpoints for user, team, invitation, and role management.
- Use functional route definitions (no classes for routers).
- All endpoints use Pydantic models for request/response validation.
- Consistent naming: lowercase with underscores for files and functions.

## Database
- PostgreSQL as the primary database.
- Models for User, Company, Invitation, Role, TeamMembership, etc.
- Alembic for migrations (in `/backend/migrations`).
- Use async DB operations for all I/O.

## Validation & Error Handling
- Input validation via Pydantic models.
- Use FastAPI's HTTPException for expected errors (e.g., invalid invite, duplicate user).
- Guard clauses and early returns for error conditions.
- Custom error types/factories for consistent error responses.
- Middleware for logging, error monitoring, and global error handling.

## Security
- JWT or session-based authentication (integrate with frontend Clerk if possible).
- Role-based access control for Manager, Team Member, Viewer.
- Secure password storage (bcrypt or argon2).
- HTTPS enforced, CORS configured for frontend domain.
- Input sanitization and output encoding to prevent injection attacks.

## Performance & Scalability
- All DB/API operations are async.
- Caching for frequently accessed data (e.g., user roles, team lists) using Redis or in-memory cache.
- Pagination for user/team lists.
- Optimize queries with indexes and query performance monitoring.

## Testing
- Pytest for unit and integration tests.
- Test cases for all endpoints, edge cases, and error conditions.
- Use test database and fixtures for isolated tests.

## Documentation
- OpenAPI schema auto-generated by FastAPI.
- Endpoint documentation available at `/docs` and `/redoc`.

---

*All backend features for Team Management MVP should follow these technical guidelines for consistency, maintainability, and scalability.* 